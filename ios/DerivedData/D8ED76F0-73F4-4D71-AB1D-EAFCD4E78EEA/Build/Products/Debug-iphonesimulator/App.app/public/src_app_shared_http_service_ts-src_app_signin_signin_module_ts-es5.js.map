{"version":3,"sources":["webpack:///src/app/shared/http.service.ts","webpack:///src/app/signin/signin-routing.module.ts","webpack:///src/app/signin/signin.module.ts"],"names":["HttpService","http","serviceName","userdetails","JSON","parse","atob","localStorage","getItem","url","environment","header","HttpHeaders","set","token","options","headers","withCredentials","get","data","post","stringify","HttpClient","Injectable","providedIn","routes","path","component","SigninPage","SigninPageRoutingModule","NgModule","imports","RouterModule","exports","SigninPageModule","CommonModule","FormsModule","IonicModule","declarations"],"mappings":"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","file":"src_app_shared_http_service_ts-src_app_signin_signin_module_ts-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpService {\n\n  constructor(private http: HttpClient) { }\n  get(serviceName: string) {\n    const userdetails: any = JSON.parse(atob(localStorage.getItem(\"24hrs-user-data\")));\n    const url = environment.baseUrl + serviceName;\n    const header = new HttpHeaders()\n      // .set(\"Access-Control-Allow-Origin\", \"*\")\n      // .set(\"Access-Control-Allow-Methods\", \"GET,POST\")\n      // .set('Accept','application/json')\n      // .set('Content-Type','application/json')\n      // .set(\"Access-Control-Allow-Headers\", \"Token, Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With\")\n      .set(\"Token\", userdetails.token);\n    //   let httpOptions = {\n    //     headers: new HttpHeaders({\n    //       \"Access-Control-Allow-Origin\": \"*\",\n    //       \"Access-Control-Allow-Methods\": \"*\",\n    //       \"Access-Control-Allow-Headers\":\"Token, Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With\",\n    //       'Authorization':userdetails.token,\n    //       \"Content-Type\": \"application/json\"\n\n    //     })\n    // };\n\n    const options = { headers: header, withCredentials: true };\n    return this.http.get(url, { headers: header });\n  }\n\n  post(serviceName: any, data: any): any {\n    const token: any = ((localStorage.getItem(\"token\")));\n\n\n    const url = environment.baseUrl + serviceName;\n    if (serviceName == '/user_get_otp' || serviceName == '/user_verify_otp' || serviceName == '/user_register' || serviceName == '/user_login') {\n      const headers = new HttpHeaders()\n      const options = { headers: headers, withCredentials: false };\n      return this.http.post(url, JSON.stringify(data), { headers: headers });\n    } else {\n      const headers = new HttpHeaders().set(\"Token\", token);\n      const options = { headers: headers, withCredentials: true };\n      return this.http.post(url, JSON.stringify(data), { headers: headers });\n    }\n\n\n\n  }\n\n  postFormData(serviceName: any, data: any): any {\n    const token: any = ((localStorage.getItem(\"token\")));\n    const url = environment.baseUrl + serviceName;\n\n    const headers = {\n      'enctype': 'multipart/form-data;',\n      'Content-Type': 'multipart/form-data;',\n      'Accept': 'plain/text',\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'POST, GET, OPTIONS, PUT',\n      'Access-Control-Allow-Headers': 'Authorization, Origin, Content-Type, X-CSRF-Token',\n      'Token': token\n    }\n\n    // const headers = new HttpHeaders().set(\"Token\", token );\n    //  headers.set('Content-Type', 'multipart/form-data'); \n    const options = { headers: headers, withCredentials: true };\n    return this.http.post(url, data, { headers: headers });\n\n  }\n\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { SigninPage } from './signin.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SigninPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SigninPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { SigninPageRoutingModule } from './signin-routing.module';\n\nimport { SigninPage } from './signin.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    SigninPageRoutingModule\n  ],\n  declarations: [SigninPage]\n})\nexport class SigninPageModule {}\n"]}